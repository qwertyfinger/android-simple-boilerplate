/*
 * MIT License
 *
 * Copyright (c) 2018 Andrii Chubko
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import buildsrc.BuildConfig
import buildsrc.Libraries

ext {
  ci = System.getenv('CI') == 'true'
}

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

apply plugin: 'kotlin-android-extensions'
androidExtensions {
  experimental = true
}

apply plugin: 'com.getkeepsafe.dexcount'
dexcount {
  includeTotalMethodCount = true
  orderByMethodCount = true
  enabled = ci
}

apply plugin: 'com.github.triplet.play'
play {
  track = 'internal'
  defaultToAppBundles = true
  serviceAccountCredentials = file('../signing/play-publish-account.json')
}

if (file('google-services.json').exists()) {
  apply plugin: 'com.google.gms.google-services'
  apply plugin: 'io.fabric'
  if (project.hasProperty('useFirebasePerf')) {
    apply plugin: 'com.google.firebase.firebase-perf'
  }
}

def appVersionCode = propOrDef("app.versioncode", 1) as Integer

android {
  compileSdkVersion BuildConfig.targetSdk
  buildToolsVersion BuildConfig.buildTools

  defaultConfig {
    applicationId 'com.qwertyfinger.androidsimpleboilerplate'
    minSdkVersion BuildConfig.minSdk
    targetSdkVersion BuildConfig.targetSdk
    versionCode appVersionCode
    versionName '1.0'

    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
  }

  signingConfigs {
    debug {
      storeFile file('../signing/app-debug.jks')
      storePassword 'qwerty'
      keyAlias 'debug'
      keyPassword 'qwerty'
    }
    def keystoreProperties = new Properties()
    if (ci) {
      keystoreProperties = project.properties
    } else {
      keystoreProperties.load(new FileInputStream(file('../signing/keystore.properties')))
    }
    release {
      storeFile file('../signing/app-release.jks')
      storePassword keystoreProperties['keystorePassword']
      keyAlias 'androidsimpleboilerplate'
      keyPassword keystoreProperties['keyPassword']
    }
  }

  buildTypes {
    debug {
      signingConfig signingConfigs.debug
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
          'proguard-rules-debug.pro'
      testProguardFile 'proguard-rules-test.pro'
      applicationIdSuffix '.debug'
      versionNameSuffix "-dev [${getGitHash()}]"
    }
    release {
      signingConfig signingConfigs.release
      shrinkResources true
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }

  dataBinding {
    enabled = true
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  testOptions.unitTests.includeAndroidResources = true

  dexOptions {
    // Don't pre-dex on CI
    preDexLibraries !ci
  }

  lintOptions {
    // Disable lintVital. Not needed since lint is run on CI
    checkReleaseBuilds false

    disable 'GradleCompatible', 'FontValidationError'
  }

  packagingOptions {
    // Exclude AndroidX version files
    exclude 'META-INF/*.version'
    // Exclude consumer proguard files
    exclude 'META-INF/proguard/*'
    // Exclude the Firebase/Fabric/other random properties files
    exclude '**/*.properties'
  }

  /*
   * Temporary workaround for using latest Dagger versions with Jetifier.
   * See https://issuetracker.google.com/115738511
   */
  configurations.all {
    resolutionStrategy.force 'com.android.tools.build.jetifier:jetifier-core:1.0.0-beta04'
  }
}

dependencies {
  testImplementation 'junit:junit:4.12'
  testImplementation Libraries.AndroidX.lifecycle_test
  testImplementation Libraries.mockito
  testImplementation Libraries.mockito_kotlin
  testImplementation Libraries.robolectric

  // Dependencies for running Espresso on local JVM using Robolectric
  testImplementation Libraries.AndroidX.Test.core
  testImplementation Libraries.AndroidX.Test.espresso_core
  testImplementation Libraries.AndroidX.Test.junit
  testImplementation Libraries.AndroidX.Test.rules
  testImplementation Libraries.AndroidX.Test.runner
  testImplementation Libraries.AndroidX.Test.truth

  androidTestImplementation Libraries.AndroidX.Test.core
  androidTestImplementation Libraries.AndroidX.Test.espresso_core
  androidTestImplementation Libraries.AndroidX.Test.junit
  androidTestImplementation Libraries.AndroidX.Test.rules
  androidTestImplementation Libraries.AndroidX.Test.runner
  androidTestImplementation Libraries.AndroidX.Test.truth
  androidTestImplementation Libraries.mockito_android

  implementation Libraries.AndroidX.appcompat
  implementation Libraries.AndroidX.constraint_layout
  implementation Libraries.AndroidX.core_ktx
  implementation Libraries.AndroidX.lifecycle_extensions
  kapt Libraries.AndroidX.lifecycle_compiler
  implementation Libraries.AndroidX.recyclerview

  implementation Libraries.coroutines
  implementation Libraries.coroutines_android
  implementation Libraries.coroutines_rx

  implementation (Libraries.crashlytics) {
    transitive = true
  }
  implementation Libraries.dagger
  kapt Libraries.dagger_compiler
  implementation Libraries.firebase_core
  if (project.hasProperty('useFirebasePerf')) {
    implementation Libraries.firebase_perf
  }
  implementation Libraries.kotlin
  debugImplementation Libraries.leakcanary
  releaseImplementation Libraries.leakcanary_no_op
  implementation Libraries.material_design

  implementation Libraries.rxandroid
  implementation Libraries.rxjava
  implementation Libraries.rxkotlin
  debugImplementation Libraries.rxlint

  implementation Libraries.threetenabp
  implementation Libraries.threetenbp
  implementation Libraries.timber
}

def getGitHash() {
  def stdout = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'rev-parse', '--short', 'HEAD'
    standardOutput = stdout
  }
  return stdout.toString().trim()
}
