/*
 * MIT License
 *
 * Copyright (c) 2018 Andrii Chubko
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import buildsrc.Libraries
import buildsrc.Versions

buildscript {
  repositories {
    google()
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
  }

  dependencies {
    classpath Libraries.Gradle.android
    classpath Libraries.Gradle.dexcount
    classpath Libraries.Gradle.fabric
    classpath Libraries.Gradle.firebase_plugins
    classpath Libraries.Gradle.google_services
    classpath Libraries.Gradle.kotlin

    /*
     * Temporary workaround for using latest Dagger versions with Jetifier.
     * See https://issuetracker.google.com/115738511
     */
    classpath 'com.android.tools.build.jetifier:jetifier-processor:1.0.0-beta04'
  }
}

plugins {
  id 'com.diffplug.gradle.spotless' version '3.20.0'
  id 'com.github.ben-manes.versions' version '0.21.0'
  id 'com.github.triplet.play' version '2.1.1'
}

allprojects {
  repositories {
    google()
    jcenter()
  }

  afterEvaluate {
    if (project.plugins.hasPlugin('kotlin-kapt')) {
      kapt {
        useBuildCache = true
        correctErrorTypes = true
        mapDiagnosticLocations = true
        // Increase maximum number of printed errors
        javacOptions {
          option('-Xmaxerrs', 500)
        }
        // Disable generated code formatting and enable incremental builds for Dagger
        arguments {
          arg('dagger.formatGeneratedSource', 'disabled')
          arg('dagger.gradle.incremental', 'enabled')
        }
      }
    }
  }
}

subprojects {
  apply plugin: 'com.diffplug.gradle.spotless'
  spotless {
    kotlin {
      target '**/*.kt'
      ktlint(Versions.ktlint).userData(['indent_size': '2'])
      licenseHeaderFile file('../spotless/copyright.kt')
    }
    java {
      target '**/*.java'
      googleJavaFormat()
      licenseHeaderFile file('../spotless/copyright.kt')
    }
    xml {
      target '**/*.xml'
      licenseHeaderFile (file('../spotless/copyright-xml.txt'), '\\<[a-zA-Z]')
    }
    format 'misc', {
      target '**/*.gradle', '**/*.gitignore', '**/*.properties', '**/*.kt', '**/*.pro'
      trimTrailingWhitespace()
      indentWithSpaces(2)
      endWithNewline()
    }
  }
}

Object propOrDef(String propertyName, Object defaultValue) {
  def propertyValue = project.properties[propertyName]
  return propertyValue != null ? propertyValue : defaultValue
}
