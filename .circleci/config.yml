version: 2.1

workspace: &workspace
  ~/android-simple-boilerplate

config_android: &config_android
  docker:
    - image: circleci/android:api-29
  working_directory: *workspace
  environment:
    JAVA_TOOL_OPTIONS: "-Xmx1024m"
    GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dkotlin.incremental=false -Dkotlin.compiler.execution.strategy=in-process"
    TERM: dumb

update_sdk: &update_sdk
  run:
    name: Update SDK
    command: |
      yes | sdkmanager --licenses || true
      sdkmanager "platform-tools" "platforms;android-29"

attach_workspace: &attach_workspace
  attach_workspace:
    at: *workspace

persist_workspace: &persist_workspace
  persist_to_workspace:
    root: *workspace
    paths:
      - ./*/build

restore_cache: &restore_cache
  restore_cache:
    key: gradle-{{ checksum "build.gradle" }}-{{ checksum "buildSrc/src/main/java/buildsrc/Dependencies.kt" }}

save_cache: &save_cache
  save_cache:
    key: gradle-{{ checksum "build.gradle" }}-{{ checksum "buildSrc/src/main/java/buildsrc/Dependencies.kt" }}
    paths:
      - ~/.gradle/caches
      - ~/.gradle/wrapper

jobs:
  build_debug:
    <<: *config_android
    steps:
      - <<: *update_sdk
      - checkout
      - <<: *restore_cache
      - run:
          name: Download Dependencies
          command: ./gradlew dependencies
      - run:
          name: Assemble debug APKs
          command: ./gradlew assembleDebug
      - <<: *save_cache
      - store_artifacts:
          path: app/build/outputs
          destination: outputs
      - <<: *persist_workspace

  run_tests:
    <<: *config_android
    parallelism: 2
    steps:
      - checkout
      - <<: *attach_workspace
      - <<: *restore_cache
      - run:
          name: Run tests
          command: |
            # Get list of classnames of tests that should run on this node
            cd app/src/test/java
            CLASSNAMES=$(circleci tests glob "**/*.kt" \
              | cut -c 1- | sed 's@/@.@g' \
              | sed 's/.\{3\}$//' \
              | circleci tests split --split-by=timings --timings-type=classname)
            cd ../../../..
            # Format the arguments to "./gradlew test"
            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
            echo "Prepared arguments for Gradle: $GRADLE_ARGS"
            ./gradlew testDebugUnitTest $GRADLE_ARGS
#            circleci tests glob "app/src/test/**/*.kt" | circleci tests split --split-by=timings --timings-type=classname | xargs -n 1 echo
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

workflows:
  version: 2
  build_test:
    jobs:
      - build_debug
      - run_tests:
          requires:
            - build_debug
